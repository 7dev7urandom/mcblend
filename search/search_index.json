{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Blender addon for working with Minecraft Bedrock Edition models. Features Exporting models for Minecraft bedrock edition. Custom Minecraft model properties like mirror , inflate or locator are supported. Exporting keyframe animations for Minecraft bedrock edition. Support for Minecraft property anim_time_update . Importing models from Minecraft bedrock edition. Generating the UV maps and the template textures. Easy way to create animations that would be tedious to do thanks to physics simulation and rigging. Planned features Planned features can be found in the \"Issues\" tab of this project on Github. Installation Download and install Blender . Download the lastest release (zip file) from projects github releases page: https://github.com/Nusiq/mcblend/releases In Blender go to: Edit -> Preferences -> Add-ons -> Install... Select the zip file in the file explorer. Serch for \"Mcblend\" in Add-ons. Check the box to enable the add-on More You can learn about the features of the project from the user manual .","title":"Home"},{"location":"#overview","text":"Blender addon for working with Minecraft Bedrock Edition models.","title":"Overview"},{"location":"#features","text":"Exporting models for Minecraft bedrock edition. Custom Minecraft model properties like mirror , inflate or locator are supported. Exporting keyframe animations for Minecraft bedrock edition. Support for Minecraft property anim_time_update . Importing models from Minecraft bedrock edition. Generating the UV maps and the template textures. Easy way to create animations that would be tedious to do thanks to physics simulation and rigging.","title":"Features"},{"location":"#planned-features","text":"Planned features can be found in the \"Issues\" tab of this project on Github.","title":"Planned features"},{"location":"#installation","text":"Download and install Blender . Download the lastest release (zip file) from projects github releases page: https://github.com/Nusiq/mcblend/releases In Blender go to: Edit -> Preferences -> Add-ons -> Install... Select the zip file in the file explorer. Serch for \"Mcblend\" in Add-ons. Check the box to enable the add-on","title":"Installation"},{"location":"#more","text":"You can learn about the features of the project from the user manual .","title":"More"},{"location":"user_manual/basics/","text":"Basics GUI After installation and enabling the add-on there should be an additional tab called \"Mcblend\" on the right side of 3d-viewport (default key to open/close the sidebar in Blender is N). Opening this tab reveals panels that are used to access most of the functionality of the addon. Every panel is described further in the user manual in panels section. Additionally, you can find some new options in the File -> Export and File -> Import menus. Limitations Cuboids only Minecraft bedrock edition models support only cuboids (unless you use an experimental feature which is not supported yet). You cannot use other shapes for your model. Mcblend uses bounding boxes to create cuboids from meshes for the exported model. Every cube in a model must be a separate mesh. Ideally the mesh should have exactly the same shape as it's bounding box. Meshes with other shapes will be aproximated to the bounding box shape or if that fails the whole model won't be exported. Note The best way to avoid problems with invalid meshes is to always use the \"Object mode\" for editing the model and always scale the cuboids in their local space. Additionally you can enable drawing the bounding box in object Object properties -> Viewport display -> Bounds Wide angles in animations Blender supports multiple rotation modes and uses different types of rotation for different kinds of objects. For example rotations of bones in armatures use quaternions but meshes use Euler (XYZ) angles. Additionally users can choose to use different rotation modes for each object. Minecraft uses Euler angles but the axes are set up differently than in Blender so there is no direct way to use the Minecraft coordinates system in Blender. Mcblend can export models and animations regardless of used rotation modes. Internally everything is converted into quaternions and then into Minecraft coordinate system when it's needed. The design choice of using quaternions internally was motivated by the fact that quaternions help avoiding some computation errors. Unfortunately, Quaternions number system has only one unique representation for every rotation orientation so you can't distinguish full turn from no turn at all (0\u00b0 = 360\u00b0). The consequence of choosing quaternions is that it's impossible to have rotation wider than 180\u00b0 between two keyframes. When an animation is exported Mcblend translates quaternions into Euler angles and picks the rotation which requires as little movement as possible to end up in a new pose. Note A quick fix to this problem is adding additional keyframes for rotations that don't look right. Names The addon does not allow the usage of names that have dots in it. Everything after the first dot in the name of the object is ignored during the conversion. You can use dots in the names of the objects which aren't converted into bones in exported Minecraft model. Conversion rules are described in the next section of the user manual. Custom properties Mcblend uses custom object properties to store some data about the Minecraft model: mc_uv_group - used to group cubes with the same width, depth and height to assign same UV-mapping to them. mc_is_bone - marks an object as a Minecraft bone (it's not necessary in most cases). mc_inflate - the \"inflate\" value of cube in the Minecraft model. mc_mirror - marks that the object has the \"mirror\" property set to true. This is used for generating the UV. If you manually map the UV in such way that the it has the same shape as mirrored UV of a cube in minecraft model than Mcblend will automatically detect that and add the mirror property to the exported model. You can view these properties in Object properties -> Custom properties","title":"Basics"},{"location":"user_manual/basics/#basics","text":"","title":"Basics"},{"location":"user_manual/basics/#gui","text":"After installation and enabling the add-on there should be an additional tab called \"Mcblend\" on the right side of 3d-viewport (default key to open/close the sidebar in Blender is N). Opening this tab reveals panels that are used to access most of the functionality of the addon. Every panel is described further in the user manual in panels section. Additionally, you can find some new options in the File -> Export and File -> Import menus.","title":"GUI"},{"location":"user_manual/basics/#limitations","text":"","title":"Limitations"},{"location":"user_manual/basics/#cuboids-only","text":"Minecraft bedrock edition models support only cuboids (unless you use an experimental feature which is not supported yet). You cannot use other shapes for your model. Mcblend uses bounding boxes to create cuboids from meshes for the exported model. Every cube in a model must be a separate mesh. Ideally the mesh should have exactly the same shape as it's bounding box. Meshes with other shapes will be aproximated to the bounding box shape or if that fails the whole model won't be exported. Note The best way to avoid problems with invalid meshes is to always use the \"Object mode\" for editing the model and always scale the cuboids in their local space. Additionally you can enable drawing the bounding box in object Object properties -> Viewport display -> Bounds","title":"Cuboids only"},{"location":"user_manual/basics/#wide-angles-in-animations","text":"Blender supports multiple rotation modes and uses different types of rotation for different kinds of objects. For example rotations of bones in armatures use quaternions but meshes use Euler (XYZ) angles. Additionally users can choose to use different rotation modes for each object. Minecraft uses Euler angles but the axes are set up differently than in Blender so there is no direct way to use the Minecraft coordinates system in Blender. Mcblend can export models and animations regardless of used rotation modes. Internally everything is converted into quaternions and then into Minecraft coordinate system when it's needed. The design choice of using quaternions internally was motivated by the fact that quaternions help avoiding some computation errors. Unfortunately, Quaternions number system has only one unique representation for every rotation orientation so you can't distinguish full turn from no turn at all (0\u00b0 = 360\u00b0). The consequence of choosing quaternions is that it's impossible to have rotation wider than 180\u00b0 between two keyframes. When an animation is exported Mcblend translates quaternions into Euler angles and picks the rotation which requires as little movement as possible to end up in a new pose. Note A quick fix to this problem is adding additional keyframes for rotations that don't look right.","title":"Wide angles in animations"},{"location":"user_manual/basics/#names","text":"The addon does not allow the usage of names that have dots in it. Everything after the first dot in the name of the object is ignored during the conversion. You can use dots in the names of the objects which aren't converted into bones in exported Minecraft model. Conversion rules are described in the next section of the user manual.","title":"Names"},{"location":"user_manual/basics/#custom-properties","text":"Mcblend uses custom object properties to store some data about the Minecraft model: mc_uv_group - used to group cubes with the same width, depth and height to assign same UV-mapping to them. mc_is_bone - marks an object as a Minecraft bone (it's not necessary in most cases). mc_inflate - the \"inflate\" value of cube in the Minecraft model. mc_mirror - marks that the object has the \"mirror\" property set to true. This is used for generating the UV. If you manually map the UV in such way that the it has the same shape as mirrored UV of a cube in minecraft model than Mcblend will automatically detect that and add the mirror property to the exported model. You can view these properties in Object properties -> Custom properties","title":"Custom properties"},{"location":"user_manual/conversion_rules/","text":"Conversion rules There are no directly equivalent objects in blender models to Minecraft bedrock edition models. Mcblend uses a set of rules to decide which parts of the model should be converted into bones, locators or cubes in the Minecraft model. Note The best way to learn what kinds of object are converted to bones, cubes and locators is trial and error. Use this if you notice something unexpected. An empty or mesh with custom is_mc_bone property always creates a a bone or a bone with cube respectively. A bone is converted into a bone unless it has no children and no parents. In this case it isn't converted at all. This behavior is to prevent the unnecessary exporting of inverse kinematics bones. An empty becomes a bone unless it has a parent but no children. In this case it creates a locator. Mesh without parent becomes a bone with a cube inside it. Mesh with a parent becomes a cube. The same set of rules as a table is_mc_bone property no parent, no children parent, no children no parent,children parent and children Bone N/A* NONE bone bone bone Empty bone bone locator bone bone Mesh bone & cube bone & cube cube bone & cube cube * bones can't have has_mc_bone property","title":"Conversion rules"},{"location":"user_manual/conversion_rules/#conversion-rules","text":"There are no directly equivalent objects in blender models to Minecraft bedrock edition models. Mcblend uses a set of rules to decide which parts of the model should be converted into bones, locators or cubes in the Minecraft model. Note The best way to learn what kinds of object are converted to bones, cubes and locators is trial and error. Use this if you notice something unexpected. An empty or mesh with custom is_mc_bone property always creates a a bone or a bone with cube respectively. A bone is converted into a bone unless it has no children and no parents. In this case it isn't converted at all. This behavior is to prevent the unnecessary exporting of inverse kinematics bones. An empty becomes a bone unless it has a parent but no children. In this case it creates a locator. Mesh without parent becomes a bone with a cube inside it. Mesh with a parent becomes a cube.","title":"Conversion rules"},{"location":"user_manual/conversion_rules/#the-same-set-of-rules-as-a-table","text":"is_mc_bone property no parent, no children parent, no children no parent,children parent and children Bone N/A* NONE bone bone bone Empty bone bone locator bone bone Mesh bone & cube bone & cube cube bone & cube cube * bones can't have has_mc_bone property","title":"The same set of rules as a table"},{"location":"user_manual/panels/","text":"Panels Custom properties panel This panel adds easy access for managing some of the custom properties used by the plugin. Usage Toggles mc_mirror - Toggles mc_mirror property for selected object. Objects that have mc_mirror property will have different UV mapping than the objects without it when you run the Set bedrock UVs operator. Set mc_uv_group - Groups selected object together which affects the UV-mapping. Object assigned to the same mc_uv_group is mapped to the same spot on the texture if they have the same dimensions. Note Sometimes when you want to get really compact texture its good to select all of the abject and assign them to the same mc_uv_group before running the Set bedrock UVs operator. The cubes with the same shape will get the same UV (for example if you have symetrical humanoid model than its left and right hand will be mapped to the same UV texture space). Toggle mc_is_bone - Toggles mc_is_bone property for selected objects. object with this property are always exported as bones in the Minecraft model. Mcblend usually tries to export most of the meshes as cubes and group them together in some parent object which will become a bone. If you want to mark certain cube as an independent bone than you need to use mc_is_bone property. Note The best way of using Mcblend is to have one rig for the model parenting the meshes to bones of that rig. This allows you to take the advantage of useful features like inverse kinematics and also creates a model in which its really easy to distinguish which blender object becames what in minecraft model. That is - bones will be translated into minecraft bones and meshes into cubes. If you add some empties without children objects they will become the locators. Set mc_inflate - Set the mc_inflate vale for selected objects. This is equivalent to setting the inflate value in the Minecraft model. Running this operator opens a panel in the bottom left corner of the 3D viewport. You can use this panel to adjust the \"inflate\" value. Round dimensions - Rounds the dimensions of the object to integers. This operator is useful for aviding problems with UV-mapping. Note Its a good habit to always run this operator before exporting the model. Models with cubes with non-integer sizes ussualy have issues with UV mapping and don't look good. If you want to so some slight tweaks to the size of a cube you should use the Set mc_inflate operator. Set bedrock UVs panel This panel is used for creating UV-mapping for the model and generating template textures. Usage To perform the UV-mapping fill in the form and press \"Set Minecraft UVs\" Texture width - the texture width property of the Minecraft model. Texture height - the texture height property of the Minecraft model. If you sent this property to 0 the texture height will be selected automatically to fit all textures as tight as possible. Template resolution - Sets the resolution of the template texture. If you set this to 0 then the template texture won't be created. This value describes how many pixels on the image is represented by one texture_widht or texture_height unit in the model definition. The value 1 gives the standard Minecraft texture resolution. Higher values can be used to create \"HD\" textures. Note After generating the UV mapping you can still go to the UV editor and move everything to your liking. This operator tries to layout the UVs of the selected objects on the texture space using the basic non-per-face minecraft UV-mapping. If you move the UV in such way that it will be impossible to map it in standard minecraft UV-mapping way than mcblend will detect that and use per-face UV mapping. Also if you manually arrange the shape of the UV to per-face UV-mapping shape than Mcblend will detect that and export the model in \"minecrafty\" way of mapping the UV. Don't move individual vertices of the faces on the UV unless you know what you're doing. The faces on the UV must remain rectangles or the UV of the exported model may have some unexpected shapes. Export bedrock model panel This panel is used for exporting the models. You can set here the name and visible bounds of the model. Exported model will automatically add the geometry. prefix so you don't need to do that. Usage Select all of the objects that you want to export. Insert the name of the model. Press the \"Export model\" button. Export bedrock animation panel This panel is used for exporting animations. Usage Select all of the objects to export. Fill in the form with the information about the animation. Press the \"Export animation\" button. Name - the name of the animation. Loop - if true than the loop property of the animation is also set to true. Current frame only - instead of exporting animation exports the current frame as looped \"pose animation\". anim_time_update - this is copied to \"anim_time_update\" property of the minecraft animtion. If you leave this blank the the animation won't use the anim_time_update property. Note The time of the animation is determined by the time of animation that you can set in the timeline. The animations should always start at frame 1. Frame 0 should have the model in the reset pose. Import bedrock model panel This panel is used for importing bedrock models from JSON files. Usage Press the button and use file explorer to find the model you want to import. There is additional property in the file explorer which allows you to specify the name of the geometry you want to import. Only geometries with geometry. prefix in the name are supported. You don't have to write the prefix (it's added automatically to the name). If you leave this field empty only the first model from the list of geometries will be imported. The \"Replace bones with empties\" changes the way of importing the model. If check the box the imported model will use empties instead of armature and bones. Both ways of importing model represent the same thing in minecraft according to the conversion rules .","title":"Panels"},{"location":"user_manual/panels/#panels","text":"","title":"Panels"},{"location":"user_manual/panels/#custom-properties-panel","text":"This panel adds easy access for managing some of the custom properties used by the plugin. Usage Toggles mc_mirror - Toggles mc_mirror property for selected object. Objects that have mc_mirror property will have different UV mapping than the objects without it when you run the Set bedrock UVs operator. Set mc_uv_group - Groups selected object together which affects the UV-mapping. Object assigned to the same mc_uv_group is mapped to the same spot on the texture if they have the same dimensions. Note Sometimes when you want to get really compact texture its good to select all of the abject and assign them to the same mc_uv_group before running the Set bedrock UVs operator. The cubes with the same shape will get the same UV (for example if you have symetrical humanoid model than its left and right hand will be mapped to the same UV texture space). Toggle mc_is_bone - Toggles mc_is_bone property for selected objects. object with this property are always exported as bones in the Minecraft model. Mcblend usually tries to export most of the meshes as cubes and group them together in some parent object which will become a bone. If you want to mark certain cube as an independent bone than you need to use mc_is_bone property. Note The best way of using Mcblend is to have one rig for the model parenting the meshes to bones of that rig. This allows you to take the advantage of useful features like inverse kinematics and also creates a model in which its really easy to distinguish which blender object becames what in minecraft model. That is - bones will be translated into minecraft bones and meshes into cubes. If you add some empties without children objects they will become the locators. Set mc_inflate - Set the mc_inflate vale for selected objects. This is equivalent to setting the inflate value in the Minecraft model. Running this operator opens a panel in the bottom left corner of the 3D viewport. You can use this panel to adjust the \"inflate\" value. Round dimensions - Rounds the dimensions of the object to integers. This operator is useful for aviding problems with UV-mapping. Note Its a good habit to always run this operator before exporting the model. Models with cubes with non-integer sizes ussualy have issues with UV mapping and don't look good. If you want to so some slight tweaks to the size of a cube you should use the Set mc_inflate operator.","title":"Custom properties panel"},{"location":"user_manual/panels/#set-bedrock-uvs-panel","text":"This panel is used for creating UV-mapping for the model and generating template textures. Usage To perform the UV-mapping fill in the form and press \"Set Minecraft UVs\" Texture width - the texture width property of the Minecraft model. Texture height - the texture height property of the Minecraft model. If you sent this property to 0 the texture height will be selected automatically to fit all textures as tight as possible. Template resolution - Sets the resolution of the template texture. If you set this to 0 then the template texture won't be created. This value describes how many pixels on the image is represented by one texture_widht or texture_height unit in the model definition. The value 1 gives the standard Minecraft texture resolution. Higher values can be used to create \"HD\" textures. Note After generating the UV mapping you can still go to the UV editor and move everything to your liking. This operator tries to layout the UVs of the selected objects on the texture space using the basic non-per-face minecraft UV-mapping. If you move the UV in such way that it will be impossible to map it in standard minecraft UV-mapping way than mcblend will detect that and use per-face UV mapping. Also if you manually arrange the shape of the UV to per-face UV-mapping shape than Mcblend will detect that and export the model in \"minecrafty\" way of mapping the UV. Don't move individual vertices of the faces on the UV unless you know what you're doing. The faces on the UV must remain rectangles or the UV of the exported model may have some unexpected shapes.","title":"Set bedrock UVs panel"},{"location":"user_manual/panels/#export-bedrock-model-panel","text":"This panel is used for exporting the models. You can set here the name and visible bounds of the model. Exported model will automatically add the geometry. prefix so you don't need to do that. Usage Select all of the objects that you want to export. Insert the name of the model. Press the \"Export model\" button.","title":"Export bedrock model panel"},{"location":"user_manual/panels/#export-bedrock-animation-panel","text":"This panel is used for exporting animations. Usage Select all of the objects to export. Fill in the form with the information about the animation. Press the \"Export animation\" button. Name - the name of the animation. Loop - if true than the loop property of the animation is also set to true. Current frame only - instead of exporting animation exports the current frame as looped \"pose animation\". anim_time_update - this is copied to \"anim_time_update\" property of the minecraft animtion. If you leave this blank the the animation won't use the anim_time_update property. Note The time of the animation is determined by the time of animation that you can set in the timeline. The animations should always start at frame 1. Frame 0 should have the model in the reset pose.","title":"Export bedrock animation panel"},{"location":"user_manual/panels/#import-bedrock-model-panel","text":"This panel is used for importing bedrock models from JSON files. Usage Press the button and use file explorer to find the model you want to import. There is additional property in the file explorer which allows you to specify the name of the geometry you want to import. Only geometries with geometry. prefix in the name are supported. You don't have to write the prefix (it's added automatically to the name). If you leave this field empty only the first model from the list of geometries will be imported. The \"Replace bones with empties\" changes the way of importing the model. If check the box the imported model will use empties instead of armature and bones. Both ways of importing model represent the same thing in minecraft according to the conversion rules .","title":"Import bedrock model panel"},{"location":"user_manual/tips/","text":"Tips and tricks This is a list of tips and tricks related to Mcbled. Some of them are related to the addon and some of them explain some basics of using blender which can be useful for working with Mcblend. Framerate By default blender uses 24FPS framerate. Minecraft uses seconds to define the timestamps of keyframes in animation. It's good to change the framerate setting into something that divides 1 second period into something nice - for example (25FPS or 20FPS). 1/24 is 0.0416666 but 1/25 is 0.04 which looks way better in the animation file. You can find the framerate setting in Output Properties -> Frame Rate . World unit scale By default 1m in your model is equal to one block in Minecraft. One meter Minecraft model is 16 pixels on the texture of the model. You might want to measure the size in pixels instead of meters. You can change the setting that you can find under Scene properties -> Unit scale . Changing the value of this property to 16 will cause that one meter of your blender model will be converted into 1 pixel in Minecraft. This setting is really useful because when you set it you can use the Item panel to track the dimensions of the object and make sure it has integer dimensions (non-integer dimensions may cause problems with UV-mapping). Note If an object uses the inflate property the \"Dimensions\" panel doesn't show it's real Minecraft dimensions. In this case, the panel can't be used to check if the dimensions use integer values only. Creating material for the Minecraft model Currently the addon doesn't create materials for your model during UV mapping and generating textures. When you create your UV map and texture template, it is not visible on your model. If you want to make the texture visible you have to create new material in shader editor and assign it to every object in your model. 1. Generate texture template using the Set bedrock UV panel . Remember to change the \"Template resolution\" setting a to value greater than 0 (1 is the standard Minecraft texture resolution). 2. Go to the shading tab and create new material. 3. Remove the Principled BSDF node and replace it with Image Texture node ( SHIFT + A and search \"Image Texture\"). Connect the node to material output just like on the image. Set interpolation setting to \"Closest\", the third setting to \"Clip\" and choose your to texture under the image setting. 4. You don't have to create new material for every object. You can assign the material you use to other objects in your model. Select all of your objects and make sure that the object that uses your material is active. Go to Material Properties right click on the material and select \"Copy to selected\". If you want to have a material that supports transparency than the nodes in the shading editor will need to have more complicated layout: You will also have to enable the transparency settings in the material configuration: Multiple animations If you want to have multiple animations in your project you can copy the scene with your finished model and animate it there. Every scene has its animation length and Mcblend settings (like the name of the animation). You can create copies of a scene by pressing the new scene button (top right corner on default GUI layout). You might have noticed that the names of your objects on the copied scene are not the same as the names of the originals. This is because they are different objects and every object has a unique name in Blender. Blender adds indexes to objects that try to use occupied names. Don't worry about it. Mcblend ignores everything after the first dot symbol in the object name. Your animations will be generated with the shortened names. Renaming objects There is a consequence of ignoring parts of the names of the objects in blender object while exporting them to Minecraft format. This feature can cause that the names are not unique anymore. For example Cube.001 and Cube.002 are the same name for Mcblend. In case of name collision Mcblend shows a warning which tells you which object should be renamed. Usually, you should have descriptive unique names for everything but if your still want to have the automatically generated names with indices you can easily remove the dot symbol from names of the selected objects by using the \"search and replace\" function which can be accessed by pressing CTRL + F2 (default key-bind setting).","title":"Tips and tricks"},{"location":"user_manual/tips/#tips-and-tricks","text":"This is a list of tips and tricks related to Mcbled. Some of them are related to the addon and some of them explain some basics of using blender which can be useful for working with Mcblend.","title":"Tips and tricks"},{"location":"user_manual/tips/#framerate","text":"By default blender uses 24FPS framerate. Minecraft uses seconds to define the timestamps of keyframes in animation. It's good to change the framerate setting into something that divides 1 second period into something nice - for example (25FPS or 20FPS). 1/24 is 0.0416666 but 1/25 is 0.04 which looks way better in the animation file. You can find the framerate setting in Output Properties -> Frame Rate .","title":"Framerate"},{"location":"user_manual/tips/#world-unit-scale","text":"By default 1m in your model is equal to one block in Minecraft. One meter Minecraft model is 16 pixels on the texture of the model. You might want to measure the size in pixels instead of meters. You can change the setting that you can find under Scene properties -> Unit scale . Changing the value of this property to 16 will cause that one meter of your blender model will be converted into 1 pixel in Minecraft. This setting is really useful because when you set it you can use the Item panel to track the dimensions of the object and make sure it has integer dimensions (non-integer dimensions may cause problems with UV-mapping). Note If an object uses the inflate property the \"Dimensions\" panel doesn't show it's real Minecraft dimensions. In this case, the panel can't be used to check if the dimensions use integer values only.","title":"World unit scale"},{"location":"user_manual/tips/#creating-material-for-the-minecraft-model","text":"Currently the addon doesn't create materials for your model during UV mapping and generating textures. When you create your UV map and texture template, it is not visible on your model. If you want to make the texture visible you have to create new material in shader editor and assign it to every object in your model. 1. Generate texture template using the Set bedrock UV panel . Remember to change the \"Template resolution\" setting a to value greater than 0 (1 is the standard Minecraft texture resolution). 2. Go to the shading tab and create new material. 3. Remove the Principled BSDF node and replace it with Image Texture node ( SHIFT + A and search \"Image Texture\"). Connect the node to material output just like on the image. Set interpolation setting to \"Closest\", the third setting to \"Clip\" and choose your to texture under the image setting. 4. You don't have to create new material for every object. You can assign the material you use to other objects in your model. Select all of your objects and make sure that the object that uses your material is active. Go to Material Properties right click on the material and select \"Copy to selected\". If you want to have a material that supports transparency than the nodes in the shading editor will need to have more complicated layout: You will also have to enable the transparency settings in the material configuration:","title":"Creating material for the Minecraft model"},{"location":"user_manual/tips/#multiple-animations","text":"If you want to have multiple animations in your project you can copy the scene with your finished model and animate it there. Every scene has its animation length and Mcblend settings (like the name of the animation). You can create copies of a scene by pressing the new scene button (top right corner on default GUI layout). You might have noticed that the names of your objects on the copied scene are not the same as the names of the originals. This is because they are different objects and every object has a unique name in Blender. Blender adds indexes to objects that try to use occupied names. Don't worry about it. Mcblend ignores everything after the first dot symbol in the object name. Your animations will be generated with the shortened names.","title":"Multiple animations"},{"location":"user_manual/tips/#renaming-objects","text":"There is a consequence of ignoring parts of the names of the objects in blender object while exporting them to Minecraft format. This feature can cause that the names are not unique anymore. For example Cube.001 and Cube.002 are the same name for Mcblend. In case of name collision Mcblend shows a warning which tells you which object should be renamed. Usually, you should have descriptive unique names for everything but if your still want to have the automatically generated names with indices you can easily remove the dot symbol from names of the selected objects by using the \"search and replace\" function which can be accessed by pressing CTRL + F2 (default key-bind setting).","title":"Renaming objects"}]}